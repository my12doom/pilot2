#include <math.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

const int N = 1000;
float PI = acos(-1.0);
int16_t V[N];
int16_t I[N];

float rand32()
{
	int32_t v = rand() &0xff;
	v |= (rand() &0xff) << 8;
	v |= (rand() &0xff) << 16;
	v |= (rand() &0xff) << 24;

	return (float)v / (1<<31);
}

// a & b : -PI ~ PI
// return a - b
static float radian_sub(float a, float b)
{
	float v1 = a-b;
	float v2 = a+2*PI-b;
	float v3 = a-2*PI-b;

	v1 = fabs(v1)>fabs(v2) ? v2 : v1;
	return fabs(v1)>fabs(v3) ? v3 : v1;
}

int test_data[] = 
{
	2712,636,
	2655,598,
	2641,586,
	2607,572,
	2570,554,
	2533,557,
	2485,556,
	2440,565,
	2398,573,
	2348,581,
	2302,608,
	2254,638,
	2209,680,
	2156,723,
	2108,766,
	2057,818,
	2009,874,
	1954,936,
	1915,1005,
	1876,1083,
	1810,1139,
	1760,1218,
	1726,1296,
	1690,1380,
	1642,1465,
	1619,1562,
	1557,1642,
	1531,1743,
	1500,1826,
	1474,1925,
	1423,2007,
	1414,2116,
	1375,2202,
	1385,2309,
	1350,2392,
	1318,2476,
	1317,2569,
	1306,2656,
	1301,2743,
	1291,2822,
	1312,2906,
	1304,2995,
	1312,3054,
	1320,3119,
	1340,3188,
	1332,3250,
	1381,3306,
	1400,3351,
	1421,3397,
	1448,3437,
	1471,3469,
	1496,3487,
	1531,3509,
	1560,3527,
	1603,3537,
	1641,3547,
	1684,3545,
	1732,3540,
	1772,3522,
	1825,3510,
	1871,3478,
	1922,3457,
	1969,3418,
	2017,3377,
	2066,3332,
	2109,3277,
	2157,3221,
	2214,3163,
	2263,3099,
	2305,3032,
	2356,2957,
	2398,2860,
	2449,2792,
	2488,2706,
	2532,2629,
	2570,2544,
	2606,2450,
	2642,2358,
	2680,2269,
	2740,2180,
	2736,2083,
	2762,1972,
	2788,1882,
	2815,1807,
	2828,1711,
	2848,1615,
	2859,1522,
	2863,1434,
	2866,1346,
	2870,1266,
	2870,1186,
	2873,1124,
	2862,1041,
	2796,982,
	2841,917,
	2820,844,
	2808,793,
	2784,745,
	2757,704,
	2733,661,
	2703,629,
	2672,600,
	2645,583,
	2608,568,
	2577,563,
	2526,551,
	2486,552,
	2438,554,
	2400,573,
	2338,582,
	2304,610,
	2258,647,
	2207,681,
	2159,720,
	2110,768,
	2058,814,
	2013,875,
	2008,958,
	1899,997,
	1852,1064,
	1808,1143,
	1769,1221,
	1725,1300,
	1677,1376,
	1645,1476,
	1613,1557,
	1569,1649,
	1530,1738,
	1493,1832,
	1459,1919,
	1422,2015,
	1410,2108,
	1390,2208,
	1357,2293,
	1346,2392,
	1342,2489,
	1325,2575,
	1325,2667,
	1311,2750,
	1304,2832,
	1293,2903,
	1298,2977,
	1304,3053,
	1319,3122,
	1335,3192,
	1345,3239,
	1367,3299,
	1377,3344,
	1407,3391,
	1422,3418,
	1452,3461,
	1497,3492,
	1531,3516,
	1567,3526,
	1612,3547,
	1638,3541,
	1685,3545,
	1720,3531,
	1777,3526,
	1817,3502,
	1877,3487,
	1906,3446,
	1967,3419,
	2015,3377,
	2065,3335,
	2113,3279,
	2165,3221,
	2212,3157,
	2259,3103,
	2310,3023,
	2356,2938,
	2400,2878,
	2442,2792,
	2491,2706,
	2530,2628,
	2569,2526,
	2606,2441,
	2642,2348,
	2676,2271,
	2710,2181,
	2739,2069,
	2767,1988,
	2787,1895,
	2808,1796,
	2825,1703,
	2831,1604,
	2853,1529,
	2867,1439,
	2872,1356,
	2875,1268,
	2873,1190,
	2869,1115,
	2869,1047,
	2863,988,
	2834,916,
	2825,860,
	2810,804,
	2790,757,
	2760,702,
	2736,673,
	2702,629,
	2679,606,
	2641,586,
	2605,568,
	2564,552,
	2528,550,
	2491,553,
	2446,570,
	2401,582,
	2348,586,
	2299,610,
	2252,640,
	2206,686,
	2155,714,
	2105,773,
	2056,820,
	2012,872,
	1959,933,
	1908,998,
	1860,1073,
	1809,1148,
	1755,1211,
	1719,1296,
	1681,1384,
	1648,1470,
	1606,1558,
	1570,1651,
	1536,1739,
	1503,1830,
	1468,1924,
	1432,2015,
	1405,2106,
	1388,2206,
	1357,2294,
	1343,2391,
	1323,2482,
	1310,2570,
	1296,2651,
	1294,2745,
	1285,2818,
	1253,2891,
	1300,2976,
	1309,3051,
	1323,3119,
	1334,3189,
	1346,3241,
	1368,3300,
	1380,3346,
	1406,3391,
	1448,3436,
	1467,3461,
	1497,3497,
	1530,3512,
	1581,3535,
	1604,3550,
	1645,3554,
	1683,3540,
	1722,3532,
	1778,3526,
	1808,3498,
	1874,3484,
	1912,3449,
	1959,3413,
	2011,3375,
	2065,3332,
	2120,3278,
	2163,3220,
	2213,3154,
	2260,3079,
	2309,3025,
	2357,2954,
	2401,2876,
	2444,2795,
	2488,2720,
	2528,2624,
	2568,2536,
	2606,2439,
	2648,2351,
	2675,2253,
	2709,2170,
	2737,2076,
	2763,1982,
	2787,1890,
	2812,1803,
	2829,1707,
	2840,1612,
	2859,1527,
	2865,1434,
	2872,1354,
	2873,1270,
	2882,1200,
	2871,1121,
	2864,1040,
	2851,974,
	2841,914,
	2825,860,
	2809,800,
	2785,740,
	2760,680,
	2735,620,
};

#include <utils/complex.h>

// note: use __SMUADX + __SMUSD to perform complex multiplication
const int cycle = 100;
int16_t cos_tbl[cycle];
int16_t sin_tbl[cycle];

int test_dlia()
{
	float freq = 10000;
	float sps = 1000000;
	float phase_diff = -130 * PI / 180;
	float amplitude_V = 6840;
	float amplitude_I = 6840;
	float noise_amplitude = 3500;
	for(int c = 0; c<N; c++)
	{
		V[c] = sin(2*PI*freq*c/sps) * amplitude_V + rand32() * noise_amplitude + 10000;
		I[c] = sin(2*PI*freq*c/sps + phase_diff) * amplitude_I + rand32() * noise_amplitude+1000;
	}

	FILE * f = fopen("Z:\\dlia.pcm", "wb");
	for(int c = 0; c<N; c++)
	{
		fwrite(&V[c], 1, 2, f);
		fwrite(&I[c], 1, 2, f);
	}
	fclose(f);

	for(int i=0; i<cycle; i++)
	{
		cos_tbl[i] = cos(2*PI*i/cycle) * 32767;
		sin_tbl[i] = sin(2*PI*i/cycle) * 32767;
	}

	int VI = 0;
	int VQ = 0;
	int II = 0;
	int IQ = 0;
// 	for(int c = 0; c<N; c++)
// 	{
// 		VI += sin(2*PI*freq*c/sps) * V[c];
// 		VQ += cos(2*PI*freq*c/sps) * V[c];
// 
// 		II += sin(2*PI*freq*c/sps) * I[c];
// 		IQ += cos(2*PI*freq*c/sps) * I[c];
// 	}
	for(int c = 0; c<100; c++)
	{
// 		VI += sin(2*PI*freq*c/sps) * test_data[c*2+1];
// 		VQ += cos(2*PI*freq*c/sps) * test_data[c*2+1];
// 
// 		II += sin(2*PI*freq*c/sps) * -test_data[c*2];
// 		IQ += cos(2*PI*freq*c/sps) * -test_data[c*2];

		VI += (sin_tbl[c%cycle] * test_data[c*2+1])>>15;
		VQ += (cos_tbl[c%cycle] * test_data[c*2+1])>>15;

		II += (sin_tbl[c%cycle] * -test_data[c*2])>>15;
		IQ += (cos_tbl[c%cycle] * -test_data[c*2])>>15;
	}

	float phase_V = atan2((double)VI, (double)VQ);
	float phase_I = atan2((double)II, (double)IQ);

	complex cV(VI, VQ);
	complex cI(II, IQ);

	complex cR = (cV / cI) * 1000;

	float phase_diff_noisy = radian_sub(phase_V, phase_I) * 180 / PI;

	float t = sin(1*PI/180)*1600;

	complex scale = complex(1000, 0) / complex(1000, -0.9);

	complex R = complex(1000, -0.9) * scale;
	complex C = complex(1.5, 1600) * scale;

	return 0;
}